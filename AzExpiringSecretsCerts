Import-Module Microsoft.Graph.Authentication
$ClientId = Get-AutomationVariable -Name 'ClientId'
$TenantId = Get-AutomationVariable -Name 'TenantId'
$Thumbprint = Get-AutomationVariable -Name 'Thumbprint'
Connect-MgGraph -clientId $ClientId -tenantId $TenantId -certificatethumbprint $Thumbprint 

$DaysUntilExpiration = '30'

$IncludeAlreadyExpired = 'No'

$Now = Get-Date

$Applications = Get-MgApplication -all

$Logs = @()

foreach ($App in $Applications) {
    $AppName = $App.DisplayName
    $AppID   = $App.Id
    $ApplID  = $App.AppId

    $AppCreds = Get-MgApplication -ApplicationId $AppID |
        Select-Object PasswordCredentials, KeyCredentials

    $Secrets = $AppCreds.PasswordCredentials
    $Certs   = $AppCreds.KeyCredentials

    foreach ($Secret in $Secrets) {
        $StartDate  = $Secret.StartDateTime
        $EndDate    = $Secret.EndDateTime
        $SecretName = $Secret.DisplayName

        $Owner    = Get-MgApplicationOwner -ApplicationId $App.Id
        $Username = $Owner.AdditionalProperties.userPrincipalName -join ';'
        $OwnerID  = $Owner.Id -join ';'

        if ($null -eq $Owner.AdditionalProperties.userPrincipalName) {
            $Username = @(
                $Owner.AdditionalProperties.displayName
                '**<This is an Application>**'
            ) -join ' '
        }
        if ($null -eq $Owner.AdditionalProperties.displayName) {
            $Username = '<<No Owner>>'
        }

        $RemainingDaysCount = ($EndDate - $Now).Days

        if ($IncludeAlreadyExpired -eq 'No') {
            if ($RemainingDaysCount -le $DaysUntilExpiration -and $RemainingDaysCount -ge 0) {
                $Logs += [PSCustomObject]@{
                    'ApplicationName'        = $AppName
                    'ApplicationID'          = $ApplID
                    'Secret Name'            = $SecretName
                    'Secret Start Date'      = $StartDate
                    'Secret End Date'        = $EndDate
                    'Certificate Name'       = $Null
                    'Certificate Start Date' = $Null
                    'Certificate End Date'   = $Null
                    'Owner'                  = $Username
                    'Owner_ObjectID'         = $OwnerID
                }
            }
        } elseif ($IncludeAlreadyExpired -eq 'Yes') {
            if ($RemainingDaysCount -le $DaysUntilExpiration) {
                $Logs += [PSCustomObject]@{
                    'ApplicationName'        = $AppName
                    'ApplicationID'          = $ApplID
                    'Secret Name'            = $SecretName
                    'Secret Start Date'      = $StartDate
                    'Secret End Date'        = $EndDate
                    'Certificate Name'       = $Null
                    'Certificate Start Date' = $Null
                    'Certificate End Date'   = $Null
                    'Owner'                  = $Username
                    'Owner_ObjectID'         = $OwnerID
                }
            }
        }
    }

    foreach ($Cert in $Certs) {
        $StartDate = $Cert.StartDateTime
        $EndDate   = $Cert.EndDateTime
        $CertName  = $Cert.DisplayName

        $Owner    = Get-MgApplicationOwner -ApplicationId $App.Id
        $Username = $Owner.AdditionalProperties.userPrincipalName -join ';'
        $OwnerID  = $Owner.Id -join ';'

        if ($null -eq $Owner.AdditionalProperties.userPrincipalName) {
            $Username = @(
                $Owner.AdditionalProperties.displayName
                '**<This is an Application>**'
            ) -join ' '
        }
        if ($null -eq $Owner.AdditionalProperties.displayName) {
            $Username = '<<No Owner>>'
        }

        $RemainingDaysCount = ($EndDate - $Now).Days

        if ($IncludeAlreadyExpired -eq 'No') {
            if ($RemainingDaysCount -le $DaysUntilExpiration -and $RemainingDaysCount -ge 0) {
                $Logs += [PSCustomObject]@{
                    'ApplicationName'        = $AppName
                    'ApplicationID'          = $ApplID
                    'Secret Name'            = $Null
                    'Certificate Name'       = $CertName
                    'Certificate Start Date' = $StartDate
                    'Certificate End Date'   = $EndDate
                    'Owner'                  = $Username
                    'Owner_ObjectID'         = $OwnerID
                }
            }
        } elseif ($IncludeAlreadyExpired -eq 'Yes') {
            if ($RemainingDaysCount -le $DaysUntilExpiration) {
                $Logs += [PSCustomObject]@{
                    'ApplicationName'        = $AppName
                    'ApplicationID'          = $ApplID
                    'Secret Name'            = $Null
                    'Certificate Name'       = $CertName
                    'Certificate Start Date' = $StartDate
                    'Certificate End Date'   = $EndDate
                    'Owner'                  = $Username
                    'Owner_ObjectID'         = $OwnerID
                }
            }
        }
    }
}

if ($Logs) {
    $style = @"
    <style>
    BODY{
        font-family: Arial;
        font-size: 10pt;
        background-color: #e6e6e6;
    }
    TABLE{
        border: 1px solid black;
        border-collapse: collapse;
        background-color: white;
    }
    TD, TH {
        border: 1px solid black;
    }
    TD {

        padding-right: 20px;
        padding-left: 3px;

    }
    TH {
        font-weight: bold;
        font-size: 12pt;
        background-color: lightsteelblue;
        color: black;
        padding-bottom: 3px;
        padding-right: 10px;
    }
    h2 {
        color: black;
        text-align: center;
        font-size: 32px;
        border-top: 2px solid black;
        border-bottom: 2px solid black;
    }
    .total {
        color: red;
        float: left;
    }
    .alert {
        background-color: lightpink;
        font-weight: bold;
    }
    .warning {
        background-color: lightyellow;
        font-weight: bold;
    }
    </style>
"@
    if ($Logs){
        $Frags = $Logs | Select-Object ApplicationName, Owner, 'Secret Name', 'Secret End Date', 'Certificate Name', 'Certificate End Date' | ConvertTo-Html -PreContent "<h2>Expiring Secrets/Certificates</h2>" -Fragment | Out-String
    }

    $Body = ConvertTo-Html -PreContent "<h3>The following App Registration Secrets/Certificates are Expiring Soon:</h3>" -PostContent $Frags -Head $style | Out-String
    $Body = $Body -replace "<table>\s+</table>"

# Send results via email
$subject = "App Registration Secrets/Certificates Expiring Soon"
$smtpServer = "smtp.office365.com"  
$smtpPort = 587                   
$smtpUsername = "SMTP USERNAME"  
$smtpPassword = "PW"    
$senderEmail = "SENDEREMAIL"
$recipientEmail = "RECIPIENT EMAIL"

Send-MailMessage -From $senderEmail -To $recipientEmail -Subject $subject -Body $body -BodyAsHtml -SmtpServer $smtpServer -UseSsl -Port $smtpPort -Credential (New-Object System.Management.Automation.PSCredential ($smtpUsername, (ConvertTo-SecureString $smtpPassword -AsPlainText -Force)))

}
